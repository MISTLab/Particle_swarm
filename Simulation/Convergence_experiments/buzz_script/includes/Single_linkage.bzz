include "includes/vec2.bzz"

#
# Make 'SingLink' namespace
#
SingLink = {}
verbose=1

# Single-linkage Algorithm
# return the clusters and the total distance of all point from the center of the cluster
SingLink.singleLinkage = function(threshold, verbose) {
	# inspired from the scipy function (cf the github)

	points = {}
	robots = {}
	clusters = {}
	rbt_counter = 0

	neighbors.foreach(function(rid, data) {
		if (rid < 40) {
			robots[rbt_counter] = rid 
			points[rid] = math.vec2.newp(data.distance, data.azimuth)	
			rbt_counter = rbt_counter + 1
		}	
	})

	i = 0
	var mat_dist = {}
	while (i < rbt_counter) {
		mat_dist[i] = {}
		j = 0
		while (j < rbt_counter) {
			mat_dist[i][j] = math.vec2.length(math.vec2.sub(points[robots[i]], points[robots[j]]))
			j = j + 1
		}
		i = i + 1
	}


	# reduced matrix (a one line distance matrix)
	mat_dist_reduite = pdist(mat_dist, rbt_counter)
	# single linkage algorithm 
	mat_Z = mst_single_linkage(mat_dist_reduite, rbt_counter)
	# cluster matrix (link between an individual and his cluster)
	mat_cluster = cluster_matrix(mat_Z, rbt_counter, threshold)
 	# Cluster representation as we need for the d_move algorithm
	clust = cluster_creator(mat_cluster, rbt_counter, robots, points)
	

	if(verbose) {
		# log("Reduced matrix")
		# table_print_SL(mat_dist_reduite)
		# log(" ")
		# log("Computed linkage matrix")
		# i = 0
		# while (i < rbt_counter-1) {
		# 	table_print_SL(mat_Z[i])
		# 	i = i + 1
		# }
		# log(" ")
		# log("Clusters matrix")
		# table_print_SL(mat_cluster)
		# log(" ")
		log("Clusters")
		i = 0
		while (i < clust.nbre_cluster) {
			log("Cluster ", i, ": ")
			table_v_print_SL(clust.clusters[i])
			i = i + 1
		}
	}
	return {.clusters = clust.clusters, .nbre_cluster = clust.nbre_cluster}
}

function pdist(D, n) {
	# IN:
	# D is the complete distance matrix 
	# n is the number of individuals in the matrix

	# OUT:
	# y is the reduced matrix

	# EXEMPLE (visuel)
	# D = [0    281  251
	#	   281  0    101
	#	   251  101  0  ]
	# y = pdist(D,3)
	# y = [281  251  101]

	ind1 = 0	# first individual
	indc = 0	# current treated distance
	var y = {}
	while (ind1 < n-1) {
		ind2 = ind1 + 1 	# second individual
		while (ind2 < n) {
			y[indc] = D[ind1][ind2]
			indc = indc + 1
			ind2 = ind2 + 1
		}
		ind1 = ind1 + 1
	}
	return y
}

function condensed_index (n, i, j) {
	# IN:
	# n is the number of individuals in the matrix
	# i is the index of the first individual
	# j is the index of the second individual

	# OUT:
	# corresponding index in the reduced matrix

	if (i < j) {
		return n*i - (i*(i+1)/2) + (j-i-1)
	}
	else if (i > j) {
		return n*j - (j*(j+1)/2) + (i-j-1)
	}
}

function mst_single_linkage(dists, n) {
	# IN:
	# dists is the condensed distance matrix 
	# n is the number of individuals in the complete matrix

	# OUT:
	# Z is the computed linkage matrix
	# 	Z[i][0] is the first individual in the couple
	# 	Z[i][1] is the second individual in the couple
	# 	Z[i][2] is the distance of the two individuals

	# EXEMPLE (visuel)
	# y = [281  251  101]
	# Z = mst_single_linkage(y,3)
	# Z = [[2  1  101]
	#	   [0  2  251]
	#	   [1  0  281]]

	# to take account of the already merged individuals
	var Z = {}
		
	var merged = {}
	var D = {}
	b = 0
	while (b < n) {
		merged[b] = 0
		D[b] = math.inf
		Z[b] = {}
		b = b + 1
	}

	var i 
	var k 
	var x 
	var y
	var dist
	var current_min

	x = 0
	k = 0
	while (k < n-1) {
		current_min = math.inf
		merged[x] = 1
		i = 0
		while (i < n) {
			if (merged[i] != 1) {
				
				dist = dists[condensed_index(n, x, i)]
				if (D[i] > dist) {
					D[i] = dist
				}
				if (D[i] < current_min) {
					y = i
					current_min = D[i]
				}
			}
			i = i + 1
		}

		Z[k] = {.0 = x, .1 = y, .2 = current_min}
		x = y
		k = k + 1
	}
	return Z
}


function cluster_matrix(Z, n, thresh) {
	# IN:
	# Z is the computed linkage matrix
	# 	Z[i][0] is the first individual in the couple
	# 	Z[i][1] is the second individual in the couple
	# 	Z[i][2] is the distance of the two individuals
	# n is the number of individuals
	# tresh is the treshold distance to consider 2 individuals in the same cluster

	# OUT:
	# clust is the cluster matrix 
	# clust is a n-size matrix with the cluster associated for each individuals

	# EXEMPLE (visuel)
	# Z = [[2  1  101]
	#	   [0  2  251]
	#	   [1  0  281]]
	# clust = cluster_matrix(Z, 3, 150)
	# clust = [0  1  1]

	var indc = 0 #couple index
	var x
	var y
	var i
	var compare
	var clust_min
	var current_min
	var current_max
	var diff
	var clust = {}

	# initially, each individual is in his own cluster
	var b = 0
	while (b < n) {
		clust[b] = b
		b = b + 1
	}

	# first clustering: clusters index are not from 0 to clust_max
	while (indc < n-1) {
		if (Z[indc][2] < thresh) {
			x = math.min(Z[indc][0], Z[indc][1])
			y = math.max(Z[indc][0], Z[indc][1])
			i = 0
			compare = clust[y]
			while (i < n) {
				if (clust[i] == compare) {
					clust[i] = clust[x]
				}
				i = i + 1
			}
		}
		indc = indc + 1
	}

	# second clustering with good clusters index
	clust_min = 0
	while (clust_min < current_max) {
		current_min = 100000000
		current_max = 0
		indc = 0
		while (indc < n) {
			if (clust[indc] >= clust_min) {
				if (clust[indc] < current_min) {
					current_min = clust[indc]
				}
				if (clust[indc] > current_max) {
					current_max = clust[indc]
				}
			}
			indc = indc + 1
		}
		diff = current_min - clust_min
		if (diff > 0) {
			indc = 0
			while (indc < n) {
				if (clust[indc] > clust_min) {
					clust[indc] = clust[indc] - diff
				}
				indc = indc + 1
			}
		}
	clust_min = clust_min + 1
	}
	return clust
}

function cluster_creator(C, n, R, P) {
	# IN:
	# C is a n-size matrix with the cluster associated for each individuals
	# n is the number of individuals
	# R is the robot identifiant matrix
	# P is the positions x and y for each robots in R

	# OUT:
	# clusters as we need for d_move
	# nbre_cluster 

	# EXEMPLE (visuel)
	# C = [0  1  1]
	# R = [2  3  4]
	# exemple: P[2].x = 18, P[2].y = -103
	# clusters = cluster_creator(C, 3, R, P)
	# exemple: clusters[0][2] = [18  -103]
	#		 cluster_id ^  ^ robot_id 
	
	var C_copy = C
	var nbre_cluster = 0
	var indr  # robot index
	var indc  # cluster index
	var clusters = {}

	indr = 0
	while (indr < n) {
		if (C_copy[indr] > nbre_cluster) {
			nbre_cluster = C_copy[indr]
		}
		indr = indr + 1
	}
	nbre_cluster = nbre_cluster + 1

	indc = 0
	while (indc < nbre_cluster) {
		clusters[indc] = {}
		indr = 0
		while (indr < n) {
			if (C_copy[indr] == indc) {
				clusters[indc][R[indr]] = {}
				clusters[indc][R[indr]] = P[R[indr]]
			}
			indr = indr + 1
		}
		indc = indc + 1
	}
	# calcul des centres de masse pour chaque cluster
	foreach(clusters, function (i, clusters) {
		clusters[i]["mass_center"] = mean(clusters[i])
		# clusters[i]["size"] = max(clusters[i], clusters[i]["mass_center"])
	})


	return {.clusters = clusters, .nbre_cluster = nbre_cluster}
}



# find the mean value of a table of vector
function mean(t) {
	mean_vec = math.vec2.new(0.0, 0.0)
	foreach(t, function(rid, data) {
		mean_vec = math.vec2.add(mean_vec, data)
	})
	mean_vec = math.vec2.scale(mean_vec, 1.0/size(t))
	return mean_vec
}

# Function to estimate the cluster size by finding the largest distance to center. 
function max(t, clus_mean_vec){
	var max_dis = {.size=0, .vec= math.vec2.new(0,0)}
	foreach(t, function(rid,data){
		var m_dis = math.vec2.dis(clus_mean_vec, data)	
		if(m_dis > max_dis.size){
			max_dis.size = m_dis
			max_dis.vec= math.vec2.newp(data.distance, data.azimuth)
		}
	})
	return max_dis
}


#vector to string
function vec2_str(v) {
	return string.concat("v: x=", string.tostring(v.x), " y=", string.tostring(v.y))
}

# print a table
function table_print_SL(t) {
  foreach(t, function(key, value) {
    log(key, " -> ", value)
  })
}

# print a table of vector
function table_v_print_SL(t) {
  foreach(t, function(key, value) {
      log(key, " -> ", vec2_str(value))
    })
}